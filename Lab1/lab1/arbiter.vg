/////////////////////////////////////////////////////////////
// Created by: Synopsys DC Expert(TM) in wire load mode
// Version   : O-2018.06
// Date      : Mon Jan 14 17:20:28 2019
/////////////////////////////////////////////////////////////


module arbiter ( a_req, b_req, reset, clock, a_res, b_res );
  input a_req, b_req, reset, clock;
  output a_res, b_res;
  wire   N25, N26, N27, N30, n1, n2, n3, n4, n6;
  wire   [1:0] state;
  wire   [1:0] next_state;

  nnd2s2 U4 ( .DIN1(a_req), .DIN2(n2), .Q(n6) );
  nnd2s2 U7 ( .DIN1(state[0]), .DIN2(state[1]), .Q(N25) );
  dffcs1 \state_reg[0]  ( .CLRB(next_state[0]), .DIN(n4), .CLK(clock), .Q(
        state[0]), .QN(n3) );
  dffcs1 \state_reg[1]  ( .CLRB(next_state[1]), .DIN(n4), .CLK(clock), .Q(
        state[1]), .QN(n2) );
  lclks1 a_res_reg ( .CLK(N25), .DIN(N26), .Q(a_res) );
  lclks1 b_res_reg ( .CLK(N25), .DIN(N27), .Q(b_res) );
  lclks1 \next_state_reg[1]  ( .CLK(1'b1), .DIN(N30), .Q(next_state[1]) );
  lclks1 \next_state_reg[0]  ( .CLK(1'b1), .DIN(n1), .Q(next_state[0]) );
  hib1s1 U11 ( .DIN(reset), .Q(n4) );
  ib1s1 U12 ( .DIN(n6), .Q(n1) );
  and3s1 U13 ( .DIN1(n6), .DIN2(n3), .DIN3(b_req), .Q(N30) );
  nor2s1 U14 ( .DIN1(state[1]), .DIN2(n3), .Q(N26) );
  nor2s1 U15 ( .DIN1(state[0]), .DIN2(n2), .Q(N27) );
endmodule

